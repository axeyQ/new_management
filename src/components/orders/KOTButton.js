'use client';
import { useState } from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Typography,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Chip
} from '@mui/material';
import {
  Print as PrintIcon,
  Close as CloseIcon,
  CheckCircle as CheckCircleIcon
} from '@mui/icons-material';
import toast from 'react-hot-toast';
import axiosWithAuth from '@/lib/axiosWithAuth';

const KOTButton = ({ order, onSuccess }) => {
  const [loading, setLoading] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);
  const [kotData, setKotData] = useState(null);

  const handleGenerateKOT = async () => {
    setLoading(true);
    try {
      // Prepare KOT data from order
      const kotItems = order.itemsSold.map(item => ({
        dish: item.dish?._id || item.dish,
        dishName: item.dishName || (item.dish?.dishName || 'Unknown Item'),
        variant: item.variant?._id || item.variant,
        variantName: item.variant?.variantName || '',
        quantity: item.quantity,
        addOns: item.addOns || [],
        notes: item.notes || ''
      }));

      // Generate temporary identifiers
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0].replace(/-/g, '');
      const timeStr = now.getTime().toString().slice(-6);
      const randomToken = Math.floor(1000 + Math.random() * 9000); // 4-digit random number

      const data = {
        salesOrder: order._id,
        items: kotItems,
        orderMode: order.orderMode,
        table: order.table,
        customer: {
          name: order.customer.name,
          phone: order.customer.phone
        },
        kotStatus: 'pending',
        // Add required fields that are normally generated by the server
        kotTokenNum: randomToken.toString(),
        refNum: order.refNum || `REF-${dateStr}-${timeStr}`,
        kotFinalId: `KF-${dateStr}-${randomToken}`,
        kotInvoiceId: `KOT-${dateStr}-${randomToken}`
      };

      // Create KOT
      const response = await axiosWithAuth.post('/api/orders/kot', data);
      
      if (response.data.success) {
        setKotData(response.data.data);
        setOpenDialog(true);
        toast.success('KOT generated successfully');
        if (onSuccess) onSuccess(response.data.data);
      } else {
        toast.error(response.data.message || 'Failed to generate KOT');
      }
    } catch (error) {
      console.error('Error generating KOT:', error);
      toast.error(error.response?.data?.message || 'Error generating KOT');
    } finally {
      setLoading(false);
    }
  };

  const handlePrintKOT = () => {
    // In a real application, this would send the KOT to a printer
    toast.success('KOT sent to printer');
    
    // Mark KOT as printed
    if (kotData && kotData._id) {
      axiosWithAuth.put(`/api/orders/kot/${kotData._id}`, {
        printed: true,
        printerId: 'main-kitchen'
      }).then(res => {
        if (res.data.success) {
          toast.success('KOT marked as printed');
        }
      }).catch(err => {
        console.error('Error marking KOT as printed:', err);
      });
    }
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  return (
    <>
      <Button
        variant="contained"
        color="secondary"
        startIcon={<PrintIcon />}
        onClick={handleGenerateKOT}
        disabled={loading || order.orderStatus !== 'pending'}
        sx={{ mr: 1 }}
      >
        {loading ? 'Generating...' : 'Generate KOT'}
      </Button>

      {/* KOT Preview Dialog */}
      <Dialog
        open={openDialog}
        onClose={handleCloseDialog}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Kitchen Order Ticket
          <IconButton
            onClick={handleCloseDialog}
            sx={{ position: 'absolute', right: 8, top: 8 }}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          {kotData && (
            <Box>
              <Box sx={{ border: '1px dashed #ccc', p: 3, mb: 3 }}>
                <Box display="flex" justifyContent="space-between" mb={2}>
                  <Typography variant="h6">KOT: {kotData.kotFinalId}</Typography>
                  <Chip
                    icon={<CheckCircleIcon />}
                    label="NEW"
                    color="warning"
                    size="small"
                  />
                </Box>
                
                <Box display="flex" justifyContent="space-between" mb={2}>
                  <Box>
                    <Typography variant="body2">
                      Order Mode: {kotData.orderMode}
                    </Typography>
                    {kotData.table && (
                      <Typography variant="body2">
                        Table: {kotData.table.tableName || 'Table ID: ' + kotData.table}
                      </Typography>
                    )}
                    <Typography variant="body2">
                      Customer: {kotData.customer.name}
                    </Typography>
                  </Box>
                  <Box>
                    <Typography variant="body2">
                      Time: {new Date().toLocaleTimeString()}
                    </Typography>
                    <Typography variant="body2">
                      Date: {new Date().toLocaleDateString()}
                    </Typography>
                    <Typography variant="body2">
                      KOT #: {kotData.kotTokenNum}
                    </Typography>
                  </Box>
                </Box>
                
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Item</TableCell>
                        <TableCell>Variant</TableCell>
                        <TableCell align="center">Qty</TableCell>
                        <TableCell>Notes</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {kotData.items.map((item, index) => (
                        <TableRow key={index}>
                          <TableCell>{item.dishName}</TableCell>
                          <TableCell>{item.variantName || '-'}</TableCell>
                          <TableCell align="center">{item.quantity}</TableCell>
                          <TableCell>{item.notes || '-'}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Box>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>
            Close
          </Button>
          <Button
            onClick={handlePrintKOT}
            variant="contained"
            startIcon={<PrintIcon />}
          >
            Print KOT
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default KOTButton;